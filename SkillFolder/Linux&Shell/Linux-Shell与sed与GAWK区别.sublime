Linux-Shell与SED与 GAWK区别 
## Source: 电子书：Linux 命令行与shell脚本大全
##  文中的[]方括号是表示可选项，而不是需要输入的
###
0. 基本形式


	sed
		sed -option 'script'|file target_process_file
	# option 默认 为e 直接读取后续脚本；f 读取脚本文件 ； n不显示输出
	# |符号表示或，
	# 如果不指定target file 则从STDIN输入，并以CONTROL-D 结束 表示EOF信号
	# {program} 内部使用分号区分命令
	# 脚本中使用 command/模式/字符/flags 的格式编辑内容

	GAWK
		gawk -option '[BEGIN| |END {用于begin end的程序}]{program1; program2}'|file  target_process_file
	#programb部分需用单引号及{}包含，与sed相同, 
	# |符号表示或，
	# 如果不指定target file 则从STDIN输入，并以CONTROL-D 结束 表示EOF信号
	# {program} 内部使用指定;分号区分多条命令 

1.变量使用
	Shell 
	shell脚本中所有的变量，包括环境变量都需要使用$转换，跟在命令后参数 为的$0 表示命令，$1 命令后第一个参数 以此类推
	可使用shift 将$1之后的变量逐个左移 即$2 变成$1 ,注意 $0 不变
	$# 表示除命令之外的的命令数， or 参数最大的变量数 但通过#取值是需要通过 ${!#} 访问
	$* 将$0之外的参数当做一个字符串整体
	$@ 将$0之外的参数一组单词的数组
	$$ 脚本中传入系统分配的PID
	$? 函数、命令等执行后的返回状态码



	GAWK
	a. gawk中使用变量时不需要加$转换 如FNR,NR,NF
		但在引用字段位置变量时，需要使用$1，$2，$3，$4，$5, 如果使用$NF则表示取最后一个字段
		$0 表示整行
	b.	脚本内自定义的变量，可直接使用 =等号赋值；可以是字母，下划线，数字，但数字不能做开头
		自定义变量可在program中定义，也可用选项-v var在命令行中指定
	c. 内置变量举例：
		FS是gawk程序中的一个变量，代表分割符,但变量赋值要用双引号FS= ","， 
			其与选项-F相同 gawk -F:  选项与值中间没有空格，指定: 冒号为分、割符的作用相同， OFS表示输出时的格式
		RS是指定行分割符 默认\n 换行符 ORS 表示输出格式换行符

		ARGC表示当前命令行参数个数（命令本身当做一个参数，与shell相同）
		ARGV表示参数的数组
		ENVIRON表示shell环境变量的关联数组（字典）

		FNR：表示当前文件中处理过的records行数
		NR：当处理多个文件的时候，表示可以跨文件总处理的行数
		NF 表示数据行的最大字段数 从1开始， 0 代表整行

	d. 在命令行中可以直接定义变量，也可以是用-v var=xxx 赋值
		gawk -f script n=2 data1 --这种方式只可以在body program中使用，不可以在BEGIN|END中使用
		gawk -v n=2 -f script  data1 --可以在BEGIN中使用

2. 数组
	Shell
	创建数组的方式 myarray=（one two three）--可以没有空格
	输出数组的方式 echo ${myarray[*|index]}  --如果只用echo $myarray只会打印打一个值
	赋值与置空 myarray[2] = xxx ;  unset myarray[2]  --值为空，但索引仍会保留 ； unset myarray 删除数组




	GAWK
	a.gawk使用关联数组，即类似于字典的形式，可用任何数字和字符串做索引
	varry[1] ; varry["Illionos"];  
	b. 读取方式 
		for (var in varry ) ,但var读取的是varry的索引值，所以要读取数字仍需要是用varry[var]
	c. 删除数组 delete array[index]

3. 结构化方式
	shell 
	a. shell脚本中的判断条件需要用test命令，及相应的[] $(())等命令
	b. if commands 		----if的判断语句是判断状态码0，or 1 而不是判断结果；commands是shell的命令
						----使用test 与[ expression ] 做其他表达式真实结果的判断 特殊字符 < ,> 需要使用转义字符
						    \< ;\>
		;then commands  ----if then 同行用；相隔，不同行不用分号
		else command
		elif command
		fi

	c.	case variable in    ----只能判断变量赋值
		pattern1|pattern2) commands;;     ----判断条件以单侧 ）判断 ， 当前条件最后一个命令以双;; 结束
		pattern3) commands;;
		*） default;;
		esac
	
	d. for var in list ---支持for(var=xx，var2 =xx; var<=15; var++ ) 的C风格循环
		do
			commands
		done

		list可以是
			--空格分隔的一系列字符
			--以双引号含括的字符组 xxxxx "xxx xxxx" xxxx ---表示三个字符组
			--$(commands) 命名的结果
			--字符串列列表的变量 list = “xxx xx xxx xxx xxx”

	e.	while|until commands|     ---while与until相反的作用，while当满足的时候执行
														   until当满足后面的条件时推出执行
				test commands
		do 
			commands
		done


	GAWK
	a. 条件判断语句中直接使用（） 即可，不用考虑shell脚本中的test变化格式
	b. if条件语句可与命令语句并排书写且没有：冒号分隔符 if (condition) statement 
		但statement后接 else 则需要用；分号分隔
		但可用{}包含statement内容
	c. 支持for(var=xx; var<=15; var++ ) 的C风格循环


4. 模式判断
	shell

	sed
	a. 可以使用数字形式表示空间
	b. pattern模式

	GAWK--在{program}前可以使用多种模式判断是命令只应用于对应的行，注意不可以指定行数
	a. 正则模式 使用/ /{program} 即可
	b. 限定特定字段应用 $1 ~ 模式匹配
	c. 反限定模式匹配 $1 !~ 模式匹配 ： 含义除第一个字段外的字段有符合条件的就应用程序
	d. 数学表达是模式 直接使用 算数表达式 '通过变量判断{program}'即可
		如 $4==0


5.格式化打印 
	shell

	GAWK--printf
	a. printf 使用对应命令的占位符  -width.preccontrol-letter 
		printf %[modifier]control-letter 
		printf "string%x" var; var按照x格式替换
	b. modifier 说明  
		width ：一个数值，指定最短输出字符长度，不够长度用空格不全，默认靠右对齐
		prec： 一个数值，对应浮点小数小数位数，对应字符串则是最大显示字符数
				printf "xxxxx  %5.1f", var ---var按照%5.1f格式显示
		var格式化为一个1个小数点的浮点数
		-： 与width配合使用，指定左对齐
	c. control letter占位符说明 %
		c 显示ascii代码 ； d整数 e科学计数 f浮点小数 g e与f的混合  x 16进制， X大写16进制 o 8进制
		s文本



6. 自定义函数定义
	Shell 
		function name {
			commands
		}

		name() {   #注意是空（）
			commands
		}

		1.默认返回的是状态码 0 或非0，不是具体值
		2.return 0~255 指定返回码，但范围在0~255
		3.echo  同于哦echo返回一个结果

		函数的参数变量与shell命令传递参数一样，通过调用函数时后跟参数 转为$1,$2...
		默认所有变量都为全局变量， 内部变量使用local var指定

		6.1 传入数组
		当需要从外部传入数组myarray时， 需要将数组逐个读取${myarray[*]}转为一系列变量传入，再有$@ 将变量打包成一组可递归的参数变量组传入
		最后使用 （；`echo "$@"`|$(echo "$@") ） 将$@数组逐个解析成值 并用最外层的（ ） 转成数组赋给局部变量
		例
		local inarray
		inarray = （；`echo "$@"`|$(echo "$@") ）  #此时inarray就是一个数组
		解析时用 echo ${inarray[*]}|“xxxxx ${inarray[*]}” 读取全部数组元素

		6.2 传出数组
		函数内部使用 echo ${resultarray[*]} 将数组逐个打印 
		在外部使用变量接收 并转为数组 result = （func var1 var2 var3... ）


	GAWK
	function name([]) #[]为可选参数变量，不是要使用[]方括号
	{
		statement
		[return xxx]
	}

	a. 要定义在BEGIN 之前，但仍是 ''范围内
	b. 可定义在函数库文件中，但使用时每个外部文件要单独指定 gawk -f funlib -f script target_process_file
